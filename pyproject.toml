[project]
name = "rag-backend"
version = "1.0.0"
description = "智能知识库问答系统 - 基于 FastAPI + FAISS + Ollama + Neo4j + OpenAI 的完整 RAG 后端"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
keywords = ["RAG", "FastAPI", "FAISS", "Neo4j", "LLM", "知识库", "问答系统"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # 核心依赖
    "numpy>=1.24.0",
    "requests>=2.31.0",
    
    # FAISS 向量存储
    "faiss-cpu>=1.7.4",
    
    # 知识图谱
    "neo4j>=5.14.0",
    
    # LangGraph 和 AI
    "langgraph>=0.0.20",
    "langchain-core>=0.1.0",
    "openai>=1.10.0",
    
    # FastAPI 和 Web 服务
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "python-multipart>=0.0.6",
    
    # 数据库和 ORM
    "sqlalchemy>=2.0.0",
    
    # 数据验证
    "pydantic>=2.0.0",
    
    # HTTP 客户端
    "httpx>=0.25.0",
    
    # 环境变量管理
    "python-dotenv>=1.0.0",
    
    # 文件解析
    "pdfplumber>=0.10.0",
    "python-docx>=1.0.0",
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
]

[project.optional-dependencies]
# GPU 支持
gpu = [
    "faiss-gpu>=1.7.4",
]

# 完整的 LangChain 集成
langchain = [
    "langchain>=0.1.0",
]

# 异步文件操作
async = [
    "aiofiles>=23.0.0",
]

# 开发工具
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "ipython>=8.0.0",
    "ipdb>=0.13.13",
]

# 所有可选依赖
all = [
    "faiss-gpu>=1.7.4",
    "langchain>=0.1.0",
    "aiofiles>=23.0.0",
]

[project.scripts]
# 命令行工具
rag-server = "main:main"
rag-chat = "chat_client:main"

[project.urls]
Homepage = "https://github.com/your-repo/RAG_backend"
Documentation = "https://github.com/your-repo/RAG_backend/blob/main/README.md"
Repository = "https://github.com/your-repo/RAG_backend"
Issues = "https://github.com/your-repo/RAG_backend/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["api", "database", "utils", "models"]

[dependency-groups]
# 开发依赖组（新的 uv 格式）
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "ipython>=8.0.0",
    "ipdb>=0.13.13",
]

[tool.ruff]
# Ruff 代码检查配置
line-length = 120
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "B904",  # Allow raising exceptions without from e
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

[tool.black]
# Black 代码格式化配置
line-length = 120
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'

[tool.mypy]
# MyPy 类型检查配置
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
# Pytest 配置
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=. --cov-report=html --cov-report=term-missing"
asyncio_mode = "auto"

